{"name":"Nano-processor-design","tagline":"A Nano-processor which is capable of executing given Assembly language code. The system was implemented on a BASYS 2 board and developed using Xilinx ISE. The Nano-processor is equipped with a basic Add-Subtract unit which is capable of executing basic mathematical operations. ","body":"**Nano–Processor Design – Final Report**\r\n\r\n**Group Members:**\r\n\r\nW.S Mendis 140392M\r\n\r\nD.M Weerasooriya 140660J\r\n\r\nL.M Jayathilake 140262P\r\n\r\n**Project Overview**\r\n\r\n4-bit processor capable of executing 4 different instructions was built. For this, following\r\ncomponents were built in order to simulate the function of a microprocessor.\r\n\r\n_4-bit Add-Subtract unit_\r\n\r\nAdd-Subtract unit was built to function the addition and subtraction using 2’s\r\ncomplement method.\r\n\r\n_3-bit adder_\r\n\r\nIt was asked to modify the 4-bit Ripple Carry Adder we developed earlier to\r\nproduce a 3-bit adder that can be used to increment the Program Counter.\r\n\r\n_k-way b-bit multiplexers_\r\n\r\nIt was asked to build up 2-way 3-bit, 2-way 4-bit and 8-way 4-bit multiplexers\r\nwho in general can take in k-inputs each with b-bits and output a group of bbits\r\nwith the help of log2k control bits to select one of the k groups of b bits.\r\n\r\n_Instruction Decoder_\r\n\r\nIt was asked to build an Instruction Decoder to activate necessary components\r\nbased on the instructions we wish to execute.\r\n\r\n_Program ROM_\r\n\r\nIt was asked to build a Program ROM using 12 ROM 16x1s which can store\r\nthe Assembly Program in machine code we need to execute.\r\n\r\n_Register Bank_\r\n\r\nIt was asked to build a Register Bank which has 7 normal 4-bit registers and 1\r\nspecial 4-bit register with which all of its bits hardcoded to 0. We were\r\ninstructed to build it using a 3-to-8 decoder and D Flip Flops with a clear input\r\nso that we can include a reset button.\r\n\r\n_3-bit Program Counter (PC)_\r\n\r\nIt was asked to build a Program Counter (PC) using D Flip Flops which can\r\nalso be reset to 0 when required.\r\n\r\n**ROM Code**\r\n\r\n**Instructions :**\r\n\r\nMOVI R7,3\r\n\r\nMOVI R1,2\r\n\r\nADD R7,R1\r\n\r\nMOVI R1,1\r\n\r\nADD R7,R1\r\n\r\n**Machine Code :**\r\n\r\n10 111 000 0011\r\n\r\n10 001 000 0010\r\n\r\n00 111 001 0000\r\n\r\n10 001 000 0001\r\n\r\n00 111 001 0000\r\n\r\n**Conclusions**\r\n\r\nWhen a nano processor is built the interaction of the sub-components Program Counter,\r\nInstruction Decoder, k-way b-bit multiplexers, Add/Subtract unit, Register Bank, Program\r\nROM are vital .The major components of the micro processor can be built using the\r\ncomponets developed earlier.\r\nBy using an instruction decoder we can decode instructions and activate necessary\r\ncomponents on the processor. In designing the instruction decoder, we should be careful only\r\nto activate the necessary modules.\r\nIt is important that the clock of the instruction decoder, register bank and the program counter\r\nshould be carefully constructed since everything has to be designed such that the thee clocks\r\nare independent from each other.\r\nDue to the limitations of the switches in BASYS 2 , the assembly program was hard coded to\r\nROM. \r\n\r\n**Important :**\r\n\r\nAll the schematic (.sch) files are uploaded to the Git. These .sch files can be used to develop the nano-processor using Xilinx ISE. Otherwise simply program the microprocessor.bit file (uploaded to Git) to FPGA of BAYSYS2 Board to test the functionality. The hard coded machine code which is programmed into ROM can be changed.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}